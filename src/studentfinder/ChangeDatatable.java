/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentfinder;

import java.awt.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 *
 * @author neel
 */
public class ChangeDatatable extends javax.swing.JFrame {

    /**
     * Creates new form ChangeDatatable
     *
     * @param point
     */
    public ChangeDatatable(Point point) {
        initComponents();

        setLocation(point);

        fileSelector.setFileFilter(new FileFilter() {

            @Override
            public String getDescription() {
                return "Excel Files (*.xlsx)";
            }

            @Override
            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".xlsx") || filename.endsWith(".xls");
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileSelector = new javax.swing.JFileChooser();
        backButton = new javax.swing.JButton();
        roomMasterButton = new javax.swing.JButton();
        blockwiseDataButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileSelector.setControlButtonsAreShown(false);

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        roomMasterButton.setText("Update RoomMaster");
        roomMasterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomMasterButtonActionPerformed(evt);
            }
        });

        blockwiseDataButton.setText("Update BlockwiseData");
        blockwiseDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockwiseDataButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Select the correct file and then click the appropriate button to update the database");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(roomMasterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blockwiseDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backButton)
                    .addComponent(fileSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fileSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blockwiseDataButton)
                    .addComponent(roomMasterButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backButton))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        new AdminFrame(getLocation()).setVisible(true);

        setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    private void roomMasterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomMasterButtonActionPerformed
        // TODO add your handling code here:
        String time = String.valueOf(System.currentTimeMillis() / 1000);
        JSONObject object = new JSONObject();

        try {
            object.put("updateTime", time);
            object.put("updatedClass", "RoomMaster");
        } catch (JSONException e) {
        }

        File file = LocalDB.getFile(LocalDB.FILE_ROOM_MASTER);

        try {
            Scanner s = new Scanner(file);

            JSONObject batchJSON = new JSONObject();
            JSONArray requests = new JSONArray();

            s.nextLine();
            while (s.hasNext()) {
                JSONObject call = new JSONObject();
                call.put("method", "DELETE");

                StringTokenizer tokenizer = new StringTokenizer(s.nextLine(), ",", true);
                String token = "";
                while (tokenizer.hasMoreTokens()) {
                    token = tokenizer.nextToken();
                }
                call.put("path", "/1/classes/RoomMaster/" + token.trim());

                requests.put(call);
            }

            batchJSON.put("requests", requests);

            if (UploadExcel.uploadRoomMaster(fileSelector.getSelectedFile())) {
                new PostRequestSwingWorker("batch", batchJSON).execute();
                new PostRequestSwingWorker("classes/Updated", object).execute();
                LocalDB.writeFile(LocalDB.FILE_LAST_UPDATE, "0");

                JOptionPane.showMessageDialog(this, "RoomMaster has been updated", "Updated", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Wrong file/directory chosen", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (FileNotFoundException | JSONException ex) {
        }
    }//GEN-LAST:event_roomMasterButtonActionPerformed

    private void blockwiseDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockwiseDataButtonActionPerformed
        // TODO add your handling code here:
        String time = String.valueOf(System.currentTimeMillis() / 1000);
        JSONObject object = new JSONObject();

        try {
            object.put("updateTime", time);
            object.put("updatedClass", "BlockwiseDataStudents");
        } catch (JSONException e) {
        }

        File file = LocalDB.getFile(LocalDB.FILE_BLOCKWISE_DATA);

        try {
            Scanner s = new Scanner(file);

            JSONObject batchJSON = new JSONObject();
            JSONArray requests = new JSONArray();

            s.nextLine();

            boolean uploadExcelCalled = false;
            boolean uploadExcelSucceeded = false;

            while (s.hasNext()) {
                JSONObject call = new JSONObject();
                call.put("method", "DELETE");

                StringTokenizer tokenizer = new StringTokenizer(s.nextLine(), ",", true);
                String token = "";
                while (tokenizer.hasMoreTokens()) {
                    token = tokenizer.nextToken();
                }
                call.put("path", "/1/classes/BlockwiseDataStudents/" + token.trim());

                requests.put(call);
                if (requests.length() == 50) {
                    batchJSON.put("requests", requests);
                    if (!uploadExcelCalled) {
                        if (UploadExcel.uploadBlockwiseData(fileSelector.getSelectedFile())) {
                            new PostRequestSwingWorker("classes/Updated", object).execute();
                            LocalDB.writeFile(LocalDB.FILE_LAST_UPDATE, "0");

                            JOptionPane.showMessageDialog(this, "BlockwiseData has been updated", "Updated", JOptionPane.INFORMATION_MESSAGE);

                            uploadExcelCalled = true;
                            uploadExcelSucceeded = true;

                            new PostRequestSwingWorker("batch", batchJSON).execute();
                            requests = new JSONArray();
                        } else {
                            JOptionPane.showMessageDialog(this, "Wrong file/directory chosen", "Error", JOptionPane.ERROR_MESSAGE);
                            uploadExcelCalled = true;
                            uploadExcelSucceeded = false;
                            requests = new JSONArray();
                        }
                    } else {
                        if (uploadExcelSucceeded) {
                            new PostRequestSwingWorker("batch", batchJSON).execute();
                            requests = new JSONArray();
                        }
                    }
                }
            }
        } catch (FileNotFoundException | JSONException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_blockwiseDataButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton blockwiseDataButton;
    private javax.swing.JFileChooser fileSelector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton roomMasterButton;
    // End of variables declaration//GEN-END:variables
}
