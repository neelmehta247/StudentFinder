/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package studentfinder;

import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author neel
 */
public class ListFrame extends javax.swing.JFrame {

    private static final long serialVersionUID = 1L;

    private final CallFrom callFrom;
    private final SortBy sortBy;
    private Student[] searchFrom;
    private final ArrayList<String> allDisplayElements = new ArrayList<>();

    public ListFrame(SortBy sortBy, CallFrom callFrom, Student[] searchFrom, Point point) {
        initComponents();

        setLocation(point);

        this.callFrom = callFrom;
        this.sortBy = sortBy;
        if (sortBy == SortBy.STUDENT && callFrom != CallFrom.MAIN_FRAME) {
            this.searchFrom = searchFrom;
            display(true);
        } else {
            display(false);
        }

        listView.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    buttonSelect.doClick();
                }
            }
        });

        textSearch.getDocument().addDocumentListener(new DocumentListener() {

            @Override
            public void insertUpdate(DocumentEvent e) {
                searchBarEdited();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                searchBarEdited();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                searchBarEdited();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textSearch = new javax.swing.JTextField();
        buttonSelect = new javax.swing.JButton();
        buttonBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listView = new javax.swing.JList<String>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonSelect.setText("Select");
        buttonSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectActionPerformed(evt);
            }
        });

        buttonBack.setText("Back");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        listView.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listView.setLayoutOrientation(javax.swing.JList.HORIZONTAL_WRAP);
        listView.setVisibleRowCount(12);
        jScrollPane1.setViewportView(listView);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 193, Short.MAX_VALUE)
                        .addComponent(buttonSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(textSearch))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonBack)
                    .addComponent(buttonSelect)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        // TODO add your handling code here:
        if (callFrom == CallFrom.MAIN_FRAME) {
            new MainFrame(getLocation()).setVisible(true);
        } else if (callFrom == CallFrom.LIST_SUBJECT) {
            new ListFrame(SortBy.SUBJECT, CallFrom.MAIN_FRAME, null, getLocation()).setVisible(true);
        } else {
            new ListFrame(SortBy.TEACHER, CallFrom.MAIN_FRAME, null, getLocation()).setVisible(true);
        }

        setVisible(false);
    }//GEN-LAST:event_buttonBackActionPerformed

    private void buttonSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectActionPerformed
        // TODO add your handling code here:
        String selected = listView.getSelectedValue();
        if (sortBy == SortBy.STUDENT) {
            for (Student student : searchFrom) {
                if ((student.firstname.trim() + " " + student.lastname.trim()).equals(selected)) {
                    new StudentInformation(student, searchFrom, callFrom, getLocation()).setVisible(true);
                    setVisible(false);
                    break;
                }
            }
        } else if (sortBy == SortBy.SUBJECT) {
            ArrayList<Student> results = new ArrayList<>();
            for (Student student : searchFrom) {
                if (selected.substring(selected.length() - 2).equals("HL")) {
                    if (student.HL.contains(selected.substring(0, selected.length() - 3))) {
                        results.add(student);
                    }
                } else {
                    if (student.SL.contains(selected.substring(0, selected.length() - 3))) {
                        results.add(student);
                    }
                }
            }
            Student[] passForward = new Student[results.size()];
            for (int i = 0; i < passForward.length; i++) {
                passForward[i] = results.get(i);
            }
            new ListFrame(SortBy.STUDENT, CallFrom.LIST_SUBJECT, passForward, getLocation()).setVisible(true);

            setVisible(false);
        } else {
            ArrayList<Student> results = new ArrayList<>();
            for (Student student : searchFrom) {
                if (student.TeacherHL.contains(selected) || student.TeacherSL.contains(selected)) {
                    results.add(student);
                }
            }
            Student[] passForward = new Student[results.size()];
            for (int i = 0; i < passForward.length; i++) {
                passForward[i] = results.get(i);
            }
            new ListFrame(SortBy.STUDENT, CallFrom.LIST_TEACHER, passForward, getLocation()).setVisible(true);

            setVisible(false);
        }
    }//GEN-LAST:event_buttonSelectActionPerformed

    private void searchBarEdited() {
        String searchText = textSearch.getText();

        ArrayList<String> display = new ArrayList<>();
        for (String allDisplayElement : allDisplayElements) {
            if (allDisplayElement.contains(searchText.toUpperCase())) {
                display.add(allDisplayElement);
            }
        }

        DefaultListModel<String> listModel = new DefaultListModel<>();

        for (String toDisplay : display) {
            listModel.addElement(toDisplay);
        }

        listView.setModel(listModel);
    }

    private void display(boolean dataAvailable) {
        if (dataAvailable) {
            if (sortBy == SortBy.STUDENT) {
                DefaultListModel<String> listModel = new DefaultListModel<>();

                for (Student studentSearchFrom : searchFrom) {
                    listModel.addElement(studentSearchFrom.firstname.trim() + " " + studentSearchFrom.lastname.trim());
                    allDisplayElements.add(studentSearchFrom.firstname.trim() + " " + studentSearchFrom.lastname.trim());
                }

                listView.setModel(listModel);
            } else if (sortBy == SortBy.SUBJECT) {
                ArrayList<String> subjects = new ArrayList<>();

                for (Student studentSearchFrom : searchFrom) {
                    for (String HL : studentSearchFrom.HL) {
                        HL += " HL";
                        if (!subjects.contains(HL)) {
                            subjects.add(HL);
                        }
                    }

                    for (String SL : studentSearchFrom.SL) {
                        SL += " SL";
                        if (!subjects.contains(SL)) {
                            subjects.add(SL);
                        }
                    }
                }

                DefaultListModel<String> listModel = new DefaultListModel<>();

                for (String subject : subjects) {
                    listModel.addElement(subject);
                    allDisplayElements.add(subject);
                }

                listView.setModel(listModel);
            } else {
                ArrayList<String> teachers = new ArrayList<>();

                for (Student studentSearchFrom : searchFrom) {
                    for (String TeacherHL : studentSearchFrom.TeacherHL) {
                        if (!teachers.contains(TeacherHL)) {
                            teachers.add(TeacherHL);
                        }
                    }

                    for (String TeacherSL : studentSearchFrom.TeacherSL) {
                        if (!teachers.contains(TeacherSL)) {
                            teachers.add(TeacherSL);
                        }
                    }
                }

                DefaultListModel<String> listModel = new DefaultListModel<>();

                for (String teacher : teachers) {
                    listModel.addElement(teacher);
                    allDisplayElements.add(teacher);
                }

                listView.setModel(listModel);
            }
        } else {
            ArrayList<Student> studentList = new ArrayList<>();

            File blockwiseData = LocalDB.getFile(LocalDB.FILE_BLOCKWISE_DATA);
            Scanner s = null;
            try {
                s = new Scanner(blockwiseData);
            } catch (FileNotFoundException e) {
            }

            String fLine = s.nextLine();

            while (s.hasNext()) {
                StringTokenizer fLineToken = new StringTokenizer(fLine, ",", false);

                String data = s.nextLine();
                StringTokenizer dataToken = new StringTokenizer(data, ",", false);

                Student student = new Student();

                while (dataToken.hasMoreTokens()) {

                    String column = fLineToken.nextToken().trim();
                    String token = dataToken.nextToken();

                    token = token.substring(0, token.length() - 1).trim();
                    if (!token.isEmpty()) {
                        switch (column) {
                            case "firstname":
                                student.firstname = token;
                                break;
                            case "lastname":
                                student.lastname = token;
                                break;
                            case "Gen":
                                student.gen = token;
                                break;
                            case "HL1":
                                student.HL.add(token);
                                break;
                            case "BlockHL1":
                                student.BlockHL.add(token);
                                break;
                            case "TchrHL1":
                                student.TeacherHL.add(token);
                                break;
                            case "HL2":
                                student.HL.add(token);
                                break;
                            case "BlockHL2":
                                student.BlockHL.add(token);
                                break;
                            case "TchrHL2":
                                student.TeacherHL.add(token);
                                break;
                            case "HL3":
                                student.HL.add(token);
                                break;
                            case "BlockHL3":
                                student.BlockHL.add(token);
                                break;
                            case "TchrHL3":
                                student.TeacherHL.add(token);
                                break;
                            case "SL1":
                                student.SL.add(token);
                                break;
                            case "BlockSL1":
                                student.BlockSL.add(token);
                                break;
                            case "TchrSL1":
                                student.TeacherSL.add(token);
                                break;
                            case "SL2":
                                student.SL.add(token);
                                break;
                            case "BlockSL2":
                                student.BlockSL.add(token);
                                break;
                            case "TchrSL2":
                                student.TeacherSL.add(token);
                                break;
                            case "SL3":
                                student.SL.add(token);
                                break;
                            case "BlockSL3":
                                student.BlockSL.add(token);
                                break;
                            case "TchrSL3":
                                student.TeacherSL.add(token);
                                break;
                            case "SL4":
                                student.SL.add(token);
                                break;
                            case "BlockSL4":
                                student.BlockSL.add(token);
                                break;
                            case "TchrSL4":
                                student.TeacherSL.add(token);
                                break;
                            case "SL5":
                                student.SL.add(token);
                                break;
                            case "BlockSL5":
                                student.BlockSL.add(token);
                                break;
                            case "TchrSL5":
                                student.TeacherSL.add(token);
                                break;
                            case "TOK":
                                student.TOK = token;
                                break;
                            case "TchrTOK":
                                student.TeacherTOK = token;
                                break;
                        }
                    }
                }
                studentList.add(student);
            }
            searchFrom = new Student[studentList.size()];
            for (int i = 0; i < searchFrom.length; i++) {
                searchFrom[i] = studentList.get(i);
            }

            display(true);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonSelect;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> listView;
    private javax.swing.JTextField textSearch;
    // End of variables declaration//GEN-END:variables
}
